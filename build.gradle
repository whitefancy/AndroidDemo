// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.3"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven {
            url "https://mvn.getui.com/nexus/content/repositories/releases/"
        }
        google()
        jcenter()

    }
}
//顶层构建文件build.gradle
//顶层 build.gradle 文件位于项目的根目录下，用于定义适用于项目中所有模块的构建配置。默认情况下，顶层构建文件使用 buildscript 代码块定义项目中所有模块共用的 Gradle 代码库和依赖项。两处repositories的闭包中都声明了jcenter()这行配置，那其实它是一个代码托管仓库，很多Android开源项目都会选择将代码托管到jcenter上，声明了这行配置之后，我们就可以在项目中轻松引用任何jcenter上的开源项目了。
//接下来，dependencies闭包中使用classpath声明了一个Gradle插件。
//我丢失了密钥库文件并从 Google 请求了新文件，他们向我发送了生成新文件的说明，以便我可以继续上传，说明包括生成密钥的此步骤：keytool -genkeypair -alias上传 -keyalg RSA -keysize 2048 -validity 9125 -keystore keystore.jks
//
//此命令行生成一个扩展名为 .jks 的密钥，但在 Visual Studio 中，通过 UI 生成的密钥位于 .keystore 扩展名中，它们有什么不同吗？我应该在 Xamarin 开发中使用密钥库吗？
//
//我试图找到.keystore文件和.jks文件之间的区别，但我找不到它。我知道jks是“Java 密钥库”，两者都是存储键/值对的方法。
//
//最终，.keystore并且.jks只是文件扩展名：这是由你来理智命名您的文件。某些应用程序使用存储在 中的密钥库文件$HOME/.keystore：通常暗示它是 JKS 文件，因为JKS 是 Sun/Oracle Java 安全提供程序中的默认密钥库类型。不是每个人都使用.jksJKS 文件的扩展名，因为它被暗示为默认值。我建议使用扩展名，只是为了记住要指定的类型（如果需要）
//我可以确认将扩展名从 .jks 更改为 .keystore 会起作用。操作前请备份！！

task clean(type: Delete) {
    delete rootProject.buildDir
}
//配置项目全局属性
//对于包含多个模块的 Android 项目，可能有必要在项目级别定义某些属性并在所有模块之间共享这些属性。为此，您可以将额外的属性添加到顶层 build.gradle 文件内的 ext 代码块中
//ext {
//    // The following are only a few examples of the types of properties you can define.
//    compileSdkVersion = 28
//    // You can also create properties to specify versions for dependencies.
//    // Having consistent versions between modules can avoid conflicts with behavior.
//    supportLibVersion = "28.0.0"
//    ...
//}
//虽然 Gradle 可让您在模块级别定义项目全局属性，但您应避免这样做，因为这样会导致共享这些属性的模块相互结合。
// 模块结合使得以后将模块作为独立项目导出更加困难，并实际妨碍 Gradle 利用并行项目执行加快多模块构建。
ext {
    //个推APPID，APP_KEY 请填写您获取到的值
    GETUI_APP_ID = ""
    GETUI_APP_KEY = ""
    //注意：该 MASTERSECRET 仅用于测试推送功能使用，对外发布请勿配置该值，避免泄漏您的 MASTERSECRET 的值。
    MASTERSECRET = ""

    //server url
    SERVER_URL = "https://restapi.getui.com/"
}
